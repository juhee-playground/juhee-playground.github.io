name: github pages

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: '**/node_modules' # node_modules 폴더를 캐싱합니다
          # package-lock.json 파일이 변경되었을 때 캐시될 수 있게 합니다
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          # cache hit이 발생하지 않았을 경우, restore-keys 에 있는 것을 꺼냅니다.
          # 단, npm ci 명령은 실행됩니다. 기존의 node_modules 캐시를 기반으로
          # 추가된 패키지만 설치할테니, 아예 처음부터 node_modules 폴더를 생성하는 것보다
          # 시간이 적게 걸릴 겁니다.
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set environment variables
        run: |
          echo "VITE_APP_BACK_END_POINT=${{ secrets.REACT_APP_BACK_END_POINT }}" >> $GITHUB_ENV
          echo "VITE_APP_EMAIL=${{ vars.REACT_APP_EMAIL }}" >> $GITHUB_ENV
          echo "VITE_APP_PHONE_NUMBER=${{ vars.REACT_APP_PHONE_NUMBER }}" >> $GITHUB_ENV
          echo "VITE_APP_GITHUB=${{ vars.REACT_APP_GITHUB }}" >> $GITHUB_ENV
          echo "VITE_APP_PORTFOLIO=${{ vars.REACT_APP_PORTFOLIO }}" >> $GITHUB_ENV

      - name: Install dependencies
        run: yarn install --immutable --immutable-cache --check-cache
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Build project
        run: yarn run build
        env:
          CI: false

      - name: Copy 404.html to dist
        run: cp 404.html dist/404.html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          # publish_branch: main
          publish_dir: ./dist # 빌드된 파일이 있는 디렉토리
